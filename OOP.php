<?php
////class Worker {
////    private $name;
////    private $age;
////    private $salary;
////
////    public function __construct($salary, $age)
////    {
////        $this->salary = $salary;
////        $this->age = $age;
////    }
////
////    public function getName() {
////        return $this->name;
////    }
////    public function setName($name) {
////        $this->name = $name;
////    }
////    private function chekAge($age) {
////        if ($age >= 1 && $age < 100) {
////            return $age;
////        }
////    }
////    public function getAge() {
////        return $this->age;
////    }
////    public function setAge($age) {
////        $this->age = $this->chekAge($age);
////    }
////    public function getSalary() {
////        return $this->salary;
////    }
////    public function setSalary($salary) {
////        $this->salary = $salary;
////    }
////}
////
////$obj = new Worker(2000, 25);
////$obj2 = new Worker(1000, 26);
////echo $obj2->getAge() + $obj2->getSalary();
////echo $obj->getSalary() + $obj2->getSalary();
//
//class User {
//    private $age;
//    private $name;
//
//    public function setName($name) {
//        $this->name = $name;
//    }
//
//    public function getName() {
//        return $this->name;
//    }
//    public function setAge($age) {
//        $this->age = $age;
//    }
//
//    public function getAge() {
//        return $this->age;
//    }
//}
//
//class Worker extends User {
//    private $salary;
//
//    public function setSalary($salary) {
//        $this->salary = $salary;
//    }
//
//    public function getSalary() {
//        return $this->salary;
//    }
//}
//
//
//$obj = new Worker();
//$obj->setName('Vasya');
//$obj->setAge(25);
//$obj->setSalary(1000);
//
//$obj2 = new Worker();
//$obj2->setName('Ivan');
//$obj2->setAge(26);
//$obj2->setSalary(1000);
//
//echo $obj->getSalary() + $obj2->getSalary();
//
//class Studen extends Worker {
//    private $kurs;
//    private $stipendia;
//
//    public function setKurs($kurs) {
//        $this->kurs = $kurs;
//    }
//    public function setStiipendia($stipendia) {
//        $this->stipendia = $stipendia;
//    }
//    public function getKurs() {
//        return $this->kurs;
//    }
//    public function getStipendia() {
//        return $this->stipendia;
//    }
//}

class Form
{

    private function param($array)
    {
        $params = '';
        foreach ($array as $value => $param) {
            $params .= ' ' . $value . '="' . $param . '" ';
        }
        return $params;
    }

    public function input($array)
    {
        return '<input ' . $this->param($array) . '>';
    }

    public function submit($array)
    {
        return '<input type="submit"' . $this->param($array) . '>';
    }

    public function password($array)
    {
        return '<input' . $this->param($array) . '>';
    }

    public function textarea($array)
    {
        return '<textarea ' . $this->param($array) . '></textarea>';
    }

    public function open($array)
    {
        return '<form ' . $this->param($array) . '>';
    }

    public function close()
    {
        return '</form>';
    }
}

class SmartForm extends Form
{
    public function input($array)
    {
        if (!empty($_POST['name'])) {
            $array['value'] = $_POST['name'];
            return parent::input($array); // TODO: Change the autogenerated stub
        }
    }

    public function password($array)
    {
        if (!empty($_POST['pass'])) {
            $array['value'] = $_POST['pass'];
            return parent::password($array); // TODO: Change the autogenerated stub
        } else {
            return parent::password($array); // TODO: Change the autogenerated stub
        }
    }
}

class Cookie
{
    public function setCookie($name, $value)
    {
        setcookie($name, $value);
    }

    public function getCookie($name)
    {
        if ($_COOKIE[$name]) {
            echo $_COOKIE[$name];
        } else {
            return 'No such cookie name!';
        }
    }

    public function delCookie($name)
    {
        unset($_COOKIE[$name]);
    }
}

class Session
{
    public function __construct()
    {
        session_start();
    }

    public function setSession($key, $value)
    {
        $_SESSION[$key] = $value;
    }

    public function getSession($name)
    {
        return $_SESSION[$name];
    }

    public function delSession($name)
    {
        unset($_SESSION[$name]);
    }

    public function checkSession($name)
    {
        if (!empty($_SESSION[$name])) {
            echo 'Session set';
        } else {
            echo 'No session';
        }
    }
}

class Flash
{
    public function setMassage($array = [])
    {
        $session = new Session();
        foreach ($array as $key => $value) {
            $session->setSession($key, $value);
        }
    }

    public function getMassage()
    {
        $session = new Session();
        if (!empty($_SESSION)) {
            foreach ($_SESSION as $key => $value) {
                echo 'Name: ' . $key . ', Value: ' . $session->getSession($key) . '<br>';
            }
        }

    }
}

class DB
{
    public $db_connection;

    public function __construct($host = '', $login = '', $password = '', $DB = '')
    {
        if (!empty($host) && !empty($login) && !empty($password) && !empty($DB)) {
            $this->db_connection = new mysqli($host, $login, $password, $DB);
        } else {
            echo 'Empty parameters';
        }

    }

    public function getData($data = '', $table)
    {
        if (!empty($data) && !empty($table)) {
            $sql = 'SELECT ' . $data . ' FROM ' . $table;
        } else if ($data == '' && !empty($table)) {
            $sql = 'SELECT * FROM ' . $table;
        } else {
            echo 'Bad data or set table!';
        }

        $res = $this->db_connection->query($sql);
        $result = $res->fetch_all(MYSQLI_ASSOC);
        foreach ($result as $values) {
            foreach ($values as $index => $value) {
                echo '<strong>Column:</strong> ' . $index . ' <strong>Value: </strong>' . $value . '.';
            }
            echo '<br>';
        }
    }

    public function delete($column, $data, $table)
    {
        if (!empty($column) && !empty($data) && !empty($table)) {
            $sql = 'DELETE FROM ' . $table . ' WHERE ' . $column . ' = ' . $data;
            $this->db_connection->query($sql);
        } else {
            echo 'Input correct data';
            die;
        }
    }

    public function update($table, $array = [], $where, $value)
    {
        if (!empty($table) && !empty($array) && !empty($where) && !empty($value)) {
            foreach ($array as $column => $update_value) {
                $sql = 'UPDATE ' . $table . ' SET ' . $column . ' = \'' . $update_value;
                $sql .= '\' WHERE ' . $where . ' = ' . $value;
                $this->db_connection->query($sql);
                echo 'Update successful';
            }
        } else {
            echo 'Not full data input or bad data!';
        }
    }

    public function insert($table, $values = [])
    {
        if (!empty($table) && !empty($values)) {
            $sql_start = 'INSERT INTO ' . $table . '(';
            foreach ($values as $column => $value) {
                $sql_column .= $column . ', ';
                $sql_value .= '\'' . $value . '\', ';
            }
            $sql_start .= rtrim($sql_column, ', ') . ') VALUES (' . rtrim($sql_value, ', ') . ')';
            $this->db_connection->query($sql_start);
            echo 'Insert completed!';
        } else {
            echo 'Empty data!';
        }
    }

    public function countRows($column, $table)
    {
        if (!empty($column) && !empty($table)) {
            $sql = 'SELECT COUNT(' . $column . ') FROM ' . $table;
            $res = $this->db_connection->query($sql)->fetch_row();
            echo 'Count rows in table: ' . $res[0];
        } else {
            echo 'Bad data!';
        }
    }

    public function clearTable($table)
    {
        if (!empty($table)) {
            $sql = 'TRUNCATE TABLE ' . $table;
            $this->db_connection->query($sql);
            echo 'Table cleared';
        }
    }

    public function clearAllTable($data_base)
    {
        $sql = 'SELECT table_name FROM INFORMATION_SCHEMA.tables WHERE table_schema = \'' . $data_base . '\'';
        $tables_names = $this->db_connection->query($sql)->fetch_all();
        $i = 0;
        foreach ($tables_names as $table_name) {
            foreach ($table_name as $name) {
                $sql_clear = 'TRUNCATE TABLE ' . $name;
                $this->db_connection->query($sql_clear);
                $i++;
            }
        }
        echo 'Tables cleared, count ' . $i;
    }
}

class Log
{
    public function saveLog($massage = []) {
        $db = new DB('localhost', 'root', 'root', 'weather_diary');
        $db->insert('logs', $massage);
    }

    public function countLog() {
        $db = new DB('localhost', 'root', 'root', 'weather_diary');
        $db->countRows('id', 'logs');
    }

    public function clearLogs($clear = false) {
        if ($clear === true) {
            $db = new DB('localhost', 'root', 'root', 'weather_diary');
            $db->clearTable('Logs');
            echo 'Table Logs cleared!';
        } else {
            echo 'No permission!';
        }
    }
}

//$db = new DB('localhost', 'root', 'root', 'weather_diary');
//$log = new Log();
//$log->saveLog(['log' => 'New create']);
//$log->countLog();
//$log->clearLogs(true);
//$db->countRows('name', 'cities');
//$db->clearTable('cities');
//$db->clearAllTable('weather_diary');
//$db->insert('cities', ['name' => 'HA']);
//$db->update('cities', ['name' => 'Kharkiv'], 'id', 3);
//$db->getData('name', 'cities');
//$db->delete('id', '1', 'cities');
//$res = new Flash();11
//$res->setMassage(['id' => '1231']);
//$res->getMassage();
//$obj = new Session();
//$obj->setSession('id123', '23123');
//$obj->delSession('id');
//$obj->delSession('id123');
//$obj->checkSession('id123');
//$form = new SmartForm();
//echo $form->open(['action'=>'OOP.php', 'method'=>'POST']);
//echo $form->input(['type'=>'text', 'placeholder'=>'Ваше имя', 'name'=>'name']);
//echo $form->password(['placeholder'=>'Ваш пароль', 'name'=>'pass']);
//echo $form->submit(['value'=>'Отправить']);
//echo $form->close();

//$obj = new Cookie();
//$obj->setCookie('test', '1234');
//$obj->getCookie('test');


